#!/bin/bash

# Check if the user is root or can run sudo. If the User ID is not equal to 0 (root user)
# the prompt below will echo to the terminal to let the user know they need to run as sudo or root.
if [[ ! "$UID" -eq 0 ]]; then
    echo "You must run this script as sudo or root. Ex 'sudo ./user_script' and don't forget to 'chmod +x user_script' before that"
    exit 1
fi

# Define the variables for the username, password, and shell
# The variables will be empty by default
username=""
password=""
shell=""

# Use getopts to get the username, and shell from the user
# The options are -u for username , -p for password, and -s for shell
# If the user does not provide an option we will echo a message to let them know they need to provide an option
# If the user provides an option that is not -u, -p, or -s we will echo a message to let them know the option is invalid
while getopts ":u:p:s:" opt; do
  case "${opt}" in
    u)
        username=${OPTARG}
        ;;
    p)
        password=${OPTARG}
        ;;
    s)
        shell=${OPTARG}
        ;;
    :)
        echo "Error: -${OPTARG} requires an argument"
        exit 1
      ;;
    ?)
        echo "Invalid option: -${OPTARG}"
        exit 1
      ;;
  esac
done

# Check if the user provided a username, password, and shell. If not, exit with an error message 
# to let the user know they need to provide all three arguments
if [[ -z $username || -z $password || -z $shell ]]; then
    echo "Please provide a username, a password, and a shell"
    exit 1
fi

# Check if the user already exists by using grep to search for the username in /etc/passwd
# If the username is found, exit with an error message to let the user know the user already exists
if grep "$username" /etc/passwd; then
    echo "Error: User '$username' already exists."
    exit 1
fi

# Set the home directory for the user
home_dir="/home/$username"

# Find the next available user ID (UID) between 1000 and 65533 (this range is typically used for regular users) REFERENCE: week 5 notes
# The awk command will search for user IDs between 1000 and 65533 in /etc/passwd
# The -F: flag sets the field separator to : (since /etc/passwd is colon-separated)
# The if statement will check if the user ID is between 1000 and 65533 and print the user ID (third field) if it meets the condition
# The tail command will get the last line (which will be the highest user ID)
# The new user ID will be the highest user ID + 1
# We will use (( )) to perform arithmetic operations
user_id=$(awk -F: '{if ($3>=1000 && $3<65533) print $3}' /etc/passwd | tail -n 1)
user_id=$((user_id + 1))

# Generate a unique Group ID (GID) for the use
# The new group ID will be the same as the user ID
group_id=$user_id

# Add entry to /etc/passwd 
# The entry will be in the format: username:x:1000:1000::/home/username:/bin/bash
# The >> command will append to the end of the /etc/passwd file
echo "$username:x:$user_id:$group_id::$home_dir:$shell" >> /etc/passwd

# Add entry to /etc/group
# The entry will be in the format: username:x:1000
# The >> command will append to the end of the /etc/group file
echo "$username:x:$group_id:" >> /etc/group

# We can use chpasswd to set the password for the user
# The format for chpasswd is username:password
# The password will be set to the value provided by the user
# chpasswd will automatically encrypt the password and it can only run 
# after the user has been created
echo "$username:$password" | chpasswd

# Create the home directory for the user
# Copy the contents of /etc/skel to the home directory
# Change the ownership of the home directory to the user
mkdir -p "$home_dir"
cp -r /etc/skel/. "$home_dir"
chown -R "$username:$username" "$home_dir"

# Check if the user was created successfully
# Print a message to let the user know the user has been created successfully if the username is found in /etc/passwd
# Otherwise print an error message
if grep "$username" /etc/passwd; then
    echo "User $username has been created with password and shell $shell."
else
    echo "Error: Failed to create user $username."
    exit 1
fi